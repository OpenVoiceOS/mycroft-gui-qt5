import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -noinstantiate -notrelocatable -nonrelocatable Mycroft 1.0'

Module {
    dependencies: [
        "QtGraphicalEffects 1.12",
        "QtMultimedia 5.12",
        "QtQml 2.7",
        "QtQml.Models 2.2",
        "QtQml.WorkerScript 2.12",
        "QtQuick 2.9",
        "QtQuick.Controls 2.5",
        "QtQuick.Controls.Fusion 2.12",
        "QtQuick.Controls.Imagine 2.12",
        "QtQuick.Controls.Material 2.12",
        "QtQuick.Controls.Styles 1.4",
        "QtQuick.Controls.Styles.Plasma 2.0",
        "QtQuick.Controls.Universal 2.12",
        "QtQuick.Extras 1.4",
        "QtQuick.Layouts 1.4",
        "QtQuick.Templates 2.5",
        "QtQuick.Window 2.6",
        "org.kde.kconfig 1.0",
        "org.kde.kirigami 2.11",
        "org.kde.kquickcontrolsaddons 2.0",
        "org.kde.plasma.components 3.0",
        "org.kde.plasma.core 2.0",
        "org.kde.plasma.extras 2.0"
    ]
    Component {
        name: "AbstractDelegate"
        defaultProperty: "contentData"
        prototype: "QQuickItem"
        exports: ["Mycroft/AbstractDelegate 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "sessionData"; type: "SessionDataMap"; isReadonly: true; isPointer: true }
        Property { name: "fillWidth"; type: "bool" }
        Property { name: "timeout"; type: "int" }
        Property { name: "skillBackgroundSource"; type: "string" }
        Property { name: "skillBackgroundColorOverlay"; type: "QColor" }
        Property { name: "contentItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "contentItemAutoHeight"; type: "bool" }
        Property { name: "contentItemAutoWidth"; type: "bool" }
        Property { name: "background"; type: "QQuickItem"; isPointer: true }
        Property { name: "leftPadding"; type: "int" }
        Property { name: "rightPadding"; type: "int" }
        Property { name: "topPadding"; type: "int" }
        Property { name: "bottomPadding"; type: "int" }
        Property { name: "leftInset"; type: "int" }
        Property { name: "rightInset"; type: "int" }
        Property { name: "topInset"; type: "int" }
        Property { name: "bottomInset"; type: "int" }
        Property { name: "contentWidth"; type: "int"; isReadonly: true }
        Property { name: "contentHeight"; type: "int"; isReadonly: true }
        Property { name: "contentData"; type: "QObject"; isList: true; isReadonly: true }
        Signal {
            name: "guiEvent"
            Parameter { name: "eventName"; type: "string" }
            Parameter { name: "data"; type: "QVariantMap" }
        }
        Method {
            name: "triggerGuiEvent"
            Parameter { name: "eventName"; type: "string" }
            Parameter { name: "parameters"; type: "QVariantMap" }
        }
        Method { name: "skillId"; type: "string" }
    }
    Component {
        name: "AbstractSkillView"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Mycroft/AbstractSkillView 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "status"; type: "MycroftController::Status"; isReadonly: true }
        Property { name: "activeSkills"; type: "ActiveSkillsModel"; isReadonly: true; isPointer: true }
        Signal { name: "activeSkillClosed" }
        Signal { name: "closed" }
    }
    Component {
        name: "ActiveSkillsModel"
        prototype: "QAbstractListModel"
        exports: ["Mycroft/ActiveSkillsModel 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "activeIndex"; type: "int"; isReadonly: true }
        Property { name: "blackList"; type: "QStringList" }
        Property { name: "whiteList"; type: "QStringList" }
        Signal {
            name: "skillActivated"
            Parameter { name: "skillId"; type: "string" }
        }
        Signal {
            name: "blacklistedSkillActivated"
            Parameter { name: "skillId"; type: "string" }
        }
    }
    Component {
        name: "DelegatesModel"
        prototype: "QAbstractListModel"
        exports: ["Mycroft/DelegatesModel 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "currentIndex"; type: "int" }
    }
    Component {
        name: "FileReader"
        prototype: "QObject"
        exports: ["Mycroft/FileReader 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "read"
            type: "QByteArray"
            Parameter { name: "filename"; type: "string" }
        }
        Method {
            name: "file_exists_local"
            type: "bool"
            Parameter { name: "filename"; type: "string" }
        }
        Method {
            name: "checkForMeta"
            type: "QStringList"
            Parameter { name: "rootDir"; type: "string" }
            Parameter { name: "findFile"; type: "string" }
        }
    }
    Component {
        name: "GlobalSettings"
        prototype: "QObject"
        exports: ["Mycroft/GlobalSettings 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "webSocketAddress"; type: "string" }
        Property { name: "autoConnect"; type: "bool" }
        Signal { name: "webSocketChanged" }
    }
    Component {
        name: "MediaService"
        prototype: "QObject"
        exports: ["Mycroft/MediaService 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "spectrum"; type: "QVector<double>"; isReadonly: true }
        Property { name: "playbackState"; type: "QMediaPlayer::State"; isReadonly: true }
        Property { name: "videoSurface"; type: "QAbstractVideoSurface"; isPointer: true }
        Signal { name: "signalVideoSurfaceChanged" }
        Signal {
            name: "playbackStateChanged"
            Parameter { name: "pbstate"; type: "QMediaPlayer::State" }
        }
        Signal {
            name: "mediaStatusChanged"
            Parameter { name: "status"; type: "QMediaPlayer::MediaStatus" }
        }
        Signal {
            name: "durationChanged"
            Parameter { name: "dur"; type: "qlonglong" }
        }
        Signal {
            name: "positionChanged"
            Parameter { name: "pos"; type: "qlonglong" }
        }
        Signal { name: "playRequested" }
        Signal { name: "pauseRequested" }
        Signal { name: "stopRequested" }
        Signal { name: "repeatRequested" }
        Signal { name: "resumeRequested" }
        Signal { name: "shuffleRequested" }
        Signal { name: "metaReceived" }
        Signal { name: "metaUpdated" }
        Signal {
            name: "levels"
            type: "int"
            Parameter { name: "left"; type: "double" }
            Parameter { name: "right"; type: "double" }
        }
        Method { name: "setupProbeSource" }
        Method {
            name: "processBuffer"
            Parameter { name: "buffer"; type: "QAudioBuffer" }
        }
        Method {
            name: "playURL"
            Parameter { name: "filename"; type: "string" }
        }
        Method { name: "playerStop" }
        Method { name: "playerPause" }
        Method { name: "playerContinue" }
        Method { name: "playerRestart" }
        Method { name: "playerNext" }
        Method { name: "playerPrevious" }
        Method { name: "playerShuffle" }
        Method { name: "playerRepeat" }
        Method {
            name: "playerSeek"
            Parameter { name: "seekvalue"; type: "qlonglong" }
        }
        Method { name: "playbackState"; type: "QMediaPlayer::State" }
        Method {
            name: "setPlaybackState"
            Parameter { name: "playbackState"; type: "QMediaPlayer::State" }
        }
        Method { name: "getTrack"; type: "string" }
        Method { name: "getPlayerMeta"; type: "QVariantMap" }
        Method { name: "getCPSMeta"; type: "QVariantMap" }
        Method { name: "getRepeat"; type: "bool" }
    }
    Component {
        name: "MycroftController"
        prototype: "QObject"
        exports: ["Mycroft/MycroftController 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Connecting": 0,
                "Open": 1,
                "Closing": 2,
                "Closed": 3,
                "Error": 4
            }
        }
        Property { name: "status"; type: "Status"; isReadonly: true }
        Property { name: "speaking"; type: "bool"; isReadonly: true }
        Property { name: "listening"; type: "bool"; isReadonly: true }
        Property { name: "currentSkill"; type: "string"; isReadonly: true }
        Property { name: "currentIntent"; type: "string"; isReadonly: true }
        Property { name: "serverReady"; type: "bool"; isReadonly: true }
        Signal { name: "socketStatusChanged" }
        Signal { name: "closed" }
        Signal { name: "isSpeakingChanged" }
        Signal { name: "isListeningChanged" }
        Signal { name: "stopped" }
        Signal { name: "notUnderstood" }
        Signal {
            name: "intentRecevied"
            Parameter { name: "type"; type: "string" }
            Parameter { name: "data"; type: "QVariantMap" }
        }
        Signal {
            name: "fallbackTextRecieved"
            Parameter { name: "skill"; type: "string" }
            Parameter { name: "data"; type: "QVariantMap" }
        }
        Signal {
            name: "utteranceManagedBySkill"
            Parameter { name: "skill"; type: "string" }
        }
        Signal {
            name: "skillTimeoutReceived"
            Parameter { name: "skillidleid"; type: "string" }
        }
        Method { name: "start" }
        Method { name: "disconnectSocket" }
        Method { name: "reconnect" }
        Method {
            name: "sendRequest"
            Parameter { name: "type"; type: "string" }
            Parameter { name: "data"; type: "QVariantMap" }
            Parameter { name: "context"; type: "QVariantMap" }
        }
        Method {
            name: "sendRequest"
            Parameter { name: "type"; type: "string" }
            Parameter { name: "data"; type: "QVariantMap" }
        }
        Method {
            name: "sendBinary"
            Parameter { name: "type"; type: "string" }
            Parameter { name: "data"; type: "QJsonObject" }
            Parameter { name: "context"; type: "QVariantMap" }
        }
        Method {
            name: "sendBinary"
            Parameter { name: "type"; type: "string" }
            Parameter { name: "data"; type: "QJsonObject" }
        }
        Method {
            name: "sendText"
            Parameter { name: "message"; type: "string" }
        }
    }
    Component { name: "QAbstractListModel"; prototype: "QAbstractItemModel" }
    Component {
        name: "QAbstractVideoFilter"
        prototype: "QObject"
        Property { name: "active"; type: "bool" }
    }
    Component {
        name: "QAbstractVideoSurface"
        prototype: "QObject"
        Property { name: "nativeResolution"; type: "QSize"; isReadonly: true }
        Signal {
            name: "activeChanged"
            Parameter { name: "active"; type: "bool" }
        }
        Signal {
            name: "surfaceFormatChanged"
            Parameter { name: "format"; type: "QVideoSurfaceFormat" }
        }
        Signal { name: "supportedFormatsChanged" }
        Signal {
            name: "nativeResolutionChanged"
            Parameter { name: "resolution"; type: "QSize" }
        }
    }
    Component {
        name: "QDeclarativeMediaMetaData"
        prototype: "QObject"
        Property { name: "title"; type: "QVariant" }
        Property { name: "subTitle"; type: "QVariant" }
        Property { name: "author"; type: "QVariant" }
        Property { name: "comment"; type: "QVariant" }
        Property { name: "description"; type: "QVariant" }
        Property { name: "category"; type: "QVariant" }
        Property { name: "genre"; type: "QVariant" }
        Property { name: "year"; type: "QVariant" }
        Property { name: "date"; type: "QVariant" }
        Property { name: "userRating"; type: "QVariant" }
        Property { name: "keywords"; type: "QVariant" }
        Property { name: "language"; type: "QVariant" }
        Property { name: "publisher"; type: "QVariant" }
        Property { name: "copyright"; type: "QVariant" }
        Property { name: "parentalRating"; type: "QVariant" }
        Property { name: "ratingOrganization"; type: "QVariant" }
        Property { name: "size"; type: "QVariant" }
        Property { name: "mediaType"; type: "QVariant" }
        Property { name: "duration"; type: "QVariant" }
        Property { name: "audioBitRate"; type: "QVariant" }
        Property { name: "audioCodec"; type: "QVariant" }
        Property { name: "averageLevel"; type: "QVariant" }
        Property { name: "channelCount"; type: "QVariant" }
        Property { name: "peakValue"; type: "QVariant" }
        Property { name: "sampleRate"; type: "QVariant" }
        Property { name: "albumTitle"; type: "QVariant" }
        Property { name: "albumArtist"; type: "QVariant" }
        Property { name: "contributingArtist"; type: "QVariant" }
        Property { name: "composer"; type: "QVariant" }
        Property { name: "conductor"; type: "QVariant" }
        Property { name: "lyrics"; type: "QVariant" }
        Property { name: "mood"; type: "QVariant" }
        Property { name: "trackNumber"; type: "QVariant" }
        Property { name: "trackCount"; type: "QVariant" }
        Property { name: "coverArtUrlSmall"; type: "QVariant" }
        Property { name: "coverArtUrlLarge"; type: "QVariant" }
        Property { name: "resolution"; type: "QVariant" }
        Property { name: "pixelAspectRatio"; type: "QVariant" }
        Property { name: "videoFrameRate"; type: "QVariant" }
        Property { name: "videoBitRate"; type: "QVariant" }
        Property { name: "videoCodec"; type: "QVariant" }
        Property { name: "posterUrl"; type: "QVariant" }
        Property { name: "chapterNumber"; type: "QVariant" }
        Property { name: "director"; type: "QVariant" }
        Property { name: "leadPerformer"; type: "QVariant" }
        Property { name: "writer"; type: "QVariant" }
        Property { name: "cameraManufacturer"; type: "QVariant" }
        Property { name: "cameraModel"; type: "QVariant" }
        Property { name: "event"; type: "QVariant" }
        Property { name: "subject"; type: "QVariant" }
        Property { name: "orientation"; type: "QVariant" }
        Property { name: "exposureTime"; type: "QVariant" }
        Property { name: "fNumber"; type: "QVariant" }
        Property { name: "exposureProgram"; type: "QVariant" }
        Property { name: "isoSpeedRatings"; type: "QVariant" }
        Property { name: "exposureBiasValue"; type: "QVariant" }
        Property { name: "dateTimeOriginal"; type: "QVariant" }
        Property { name: "dateTimeDigitized"; type: "QVariant" }
        Property { name: "subjectDistance"; type: "QVariant" }
        Property { name: "meteringMode"; type: "QVariant" }
        Property { name: "lightSource"; type: "QVariant" }
        Property { name: "flash"; type: "QVariant" }
        Property { name: "focalLength"; type: "QVariant" }
        Property { name: "exposureMode"; type: "QVariant" }
        Property { name: "whiteBalance"; type: "QVariant" }
        Property { name: "digitalZoomRatio"; type: "QVariant" }
        Property { name: "focalLengthIn35mmFilm"; type: "QVariant" }
        Property { name: "sceneCaptureType"; type: "QVariant" }
        Property { name: "gainControl"; type: "QVariant" }
        Property { name: "contrast"; type: "QVariant" }
        Property { name: "saturation"; type: "QVariant" }
        Property { name: "sharpness"; type: "QVariant" }
        Property { name: "deviceSettingDescription"; type: "QVariant" }
        Property { name: "gpsLatitude"; type: "QVariant" }
        Property { name: "gpsLongitude"; type: "QVariant" }
        Property { name: "gpsAltitude"; type: "QVariant" }
        Property { name: "gpsTimeStamp"; type: "QVariant" }
        Property { name: "gpsSatellites"; type: "QVariant" }
        Property { name: "gpsStatus"; type: "QVariant" }
        Property { name: "gpsDOP"; type: "QVariant" }
        Property { name: "gpsSpeed"; type: "QVariant" }
        Property { name: "gpsTrack"; type: "QVariant" }
        Property { name: "gpsTrackRef"; type: "QVariant" }
        Property { name: "gpsImgDirection"; type: "QVariant" }
        Property { name: "gpsImgDirectionRef"; type: "QVariant" }
        Property { name: "gpsMapDatum"; type: "QVariant" }
        Property { name: "gpsProcessingMethod"; type: "QVariant" }
        Property { name: "gpsAreaInformation"; type: "QVariant" }
        Signal { name: "metaDataChanged" }
    }
    Component {
        name: "SessionDataMap"
        prototype: "QQmlPropertyMap"
        exports: ["Mycroft/SessionDataMap 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Signal {
            name: "dataCleared"
            Parameter { name: "key"; type: "string" }
        }
    }
    Component {
        prototype: "QQuickItem"
        name: "Mycroft/AudioPlayer 1.0"
        exports: ["Mycroft/AudioPlayer 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "status"; type: "string" }
        Property { name: "switchWidth"; type: "int" }
        Property { name: "progressBar"; type: "bool" }
        Property { name: "thumbnailVisible"; type: "bool" }
        Property { name: "titleVisible"; type: "bool" }
        Property { name: "nextAction"; type: "QVariant" }
        Property { name: "previousAction"; type: "QVariant" }
        Property { name: "horizontal"; type: "bool"; isReadonly: true }
        Property { name: "source"; type: "QUrl" }
        Property { name: "thumbnail"; type: "QUrl" }
        Property { name: "title"; type: "string" }
        Property { name: "currentState"; type: "int"; isReadonly: true }
        Method {
            name: "msToTime"
            type: "QVariant"
            Parameter { name: "duration"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QQuickLabel"
        name: "Mycroft/AutoFitLabel 1.0"
        exports: ["Mycroft/AutoFitLabel 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickItem"
        name: "Mycroft/BoxLayout 1.0"
        exports: ["Mycroft/BoxLayout 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "orientation"; type: "int" }
        Property { name: "enforceUniformSizes"; type: "bool" }
        Property { name: "rowSpacing"; type: "double" }
        Property { name: "columnSpacing"; type: "double" }
    }
    Component {
        prototype: "QQuickBusyIndicator"
        name: "Mycroft/BusyIndicator 1.0"
        exports: ["Mycroft/BusyIndicator 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "speed"; type: "double" }
        Method { name: "changeStage"; type: "QVariant" }
    }
    Component {
        prototype: "AbstractDelegate"
        name: "Mycroft/CardDelegate 1.0"
        exports: ["Mycroft/CardDelegate 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentData"
        Property { name: "gridUnit"; type: "int" }
        Property { name: "cardRadius"; type: "int" }
        Property { name: "cardBackgroundOverlayColor"; type: "QColor" }
        Property { name: "cardBackgroundImage"; type: "QUrl" }
        Property { name: "controlBar"; type: "QQmlComponent"; isPointer: true }
        Property { name: "controlBarItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "wideMode"; type: "bool"; isReadonly: true }
        Signal { name: "backRequested" }
    }
    Component {
        prototype: "AbstractDelegate"
        name: "Mycroft/Delegate 1.0"
        exports: ["Mycroft/Delegate 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentData"
        Property { name: "controlBar"; type: "QQmlComponent"; isPointer: true }
        Property { name: "controlBarItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "wideMode"; type: "bool"; isReadonly: true }
        Signal { name: "backRequested" }
    }
    Component {
        prototype: "QQuickItem"
        name: "Mycroft/MarqueeText 1.0"
        exports: ["Mycroft/MarqueeText 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "speed"; type: "int" }
        Property { name: "delay"; type: "int" }
        Property { name: "marqueeWidth"; type: "QVariant" }
        Property { name: "rightToLeft"; type: "bool" }
        Property { name: "distance"; type: "int" }
        Property { name: "color"; type: "QColor" }
        Property { name: "text"; type: "string" }
        Property { name: "font"; type: "QFont" }
        Property { name: "minimumPointSize"; type: "int" }
        Property { name: "minimumPixelSize"; type: "int" }
        Property { name: "fontSizeMode"; type: "int" }
        Property { name: "verticalAlignment"; type: "int" }
        Property { name: "paintedWidth"; type: "double"; isReadonly: true }
        Method { name: "reset"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickFlickable"
        name: "Mycroft/PaginatedText 1.0"
        exports: ["Mycroft/PaginatedText 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "flickableData"
        Property { name: "columns"; type: "int"; isReadonly: true }
        Property { name: "currentIndex"; type: "int" }
        Property { name: "leftPadding"; type: "int" }
        Property { name: "topPadding"; type: "int" }
        Property { name: "rightPadding"; type: "int" }
        Property { name: "bottomPadding"; type: "int" }
        Property { name: "text"; type: "string" }
        Property { name: "font"; type: "QFont" }
        Property { name: "horizontalAlignment"; type: "int" }
    }
    Component {
        prototype: "AbstractDelegate"
        name: "Mycroft/ProportionalDelegate 1.0"
        exports: ["Mycroft/ProportionalDelegate 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentData"
        Property { name: "unitDensity"; type: "int" }
        Property { name: "proportionalGridUnit"; type: "double" }
        Property { name: "spacing"; type: "int" }
        Property { name: "enforceUniformSizes"; type: "bool" }
        Property { name: "controlBar"; type: "QQmlComponent"; isPointer: true }
        Property { name: "controlBarItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "wideMode"; type: "bool"; isReadonly: true }
        Signal { name: "backRequested" }
    }
    Component {
        prototype: "AbstractDelegate"
        name: "Mycroft/ScrollableDelegate 1.0"
        exports: ["Mycroft/ScrollableDelegate 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "userInteracting"; type: "bool"; isReadonly: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "controlBar"; type: "QQmlComponent"; isPointer: true }
        Property { name: "controlBarItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "wideMode"; type: "bool"; isReadonly: true }
        Signal { name: "backRequested" }
    }
    Component {
        prototype: "AbstractSkillView"
        name: "Mycroft/SkillView 1.0"
        exports: ["Mycroft/SkillView 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "currentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "switchWidth"; type: "int" }
        Property { name: "leftPadding"; type: "int" }
        Property { name: "topPadding"; type: "int" }
        Property { name: "rightPadding"; type: "int" }
        Property { name: "bottomPadding"; type: "int" }
        Property { name: "open"; type: "bool" }
        Property { name: "backgroundVisible"; type: "bool" }
    }
    Component {
        prototype: "QQuickItem"
        name: "Mycroft/SlideShow 1.0"
        exports: ["Mycroft/SlideShow 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "model"; type: "QVariant" }
        Property { name: "delegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "interval"; type: "int" }
        Property { name: "running"; type: "bool" }
        Property { name: "loop"; type: "bool" }
    }
    Component {
        prototype: "QQuickItem"
        name: "Mycroft/SlidingImage 1.0"
        exports: ["Mycroft/SlidingImage 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "running"; type: "bool" }
        Property { name: "speed"; type: "double" }
        Property { name: "source"; type: "QUrl" }
    }
    Component {
        prototype: "QObject"
        name: "Mycroft/SoundEffects 1.0"
        exports: ["Mycroft/SoundEffects 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        isCreatable: false
        isSingleton: true
        Property { name: "clickedSound"; type: "QSoundEffect"; isPointer: true }
        Method {
            name: "playClickedSound"
            type: "QVariant"
            Parameter { name: "url"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QQuickItem"
        name: "Mycroft/StatusIndicator 1.0"
        exports: ["Mycroft/StatusIndicator 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "hasShadow"; type: "bool" }
    }
    Component {
        prototype: "QObject"
        name: "Mycroft/Units 1.0"
        exports: ["Mycroft/Units 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        isCreatable: false
        isSingleton: true
        Property { name: "gridUnit"; type: "int" }
        Property { name: "devicePixelRatio"; type: "double" }
        Property { name: "largeSpacing"; type: "int" }
        Property { name: "smallSpacing"; type: "int" }
        Property { name: "fontMetrics"; type: "QVariant" }
        Property { name: "iconSizes"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "Mycroft/VideoPlayer 1.0"
        exports: ["Mycroft/VideoPlayer 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "status"; type: "string" }
        Property { name: "progressBar"; type: "bool" }
        Property { name: "hasNextAction"; type: "bool" }
        Property { name: "hasPreviousAction"; type: "bool" }
        Property { name: "controlBarOpened"; type: "bool" }
        Property { name: "nextAction"; type: "QVariant" }
        Property { name: "previousAction"; type: "QVariant" }
        Property { name: "source"; type: "QUrl" }
        Property { name: "currentState"; type: "int"; isReadonly: true }
        Method {
            name: "formatTime"
            type: "QVariant"
            Parameter { name: "timeInMs"; type: "QVariant" }
        }
    }
}
